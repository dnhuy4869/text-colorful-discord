#include <iostream>
#include <Windows.h>
#include <string>
#include <unordered_map>

const std::unordered_map<char, std::string> ALL_COLOR_CHARS =
{
	{ 'a', ":756493399179132930:" },
	{ 'A', ":756493399179132930:" },
	{ 'b', ":756493412588322968:" },
	{ 'B', ":756493412588322968:" },
	{ 'c', ":756493421258211357:" },
	{ 'C', ":756493421258211357:" },
	{ 'd', ":756493438098079754:" },
	{ 'D', ":756493438098079754:" },
	{ 'e', ":756493446763511820:" },
	{ 'E', ":756493446763511820:" },
	{ 'f', ":756493465478758460:" },
	{ 'F', ":756493465478758460:" },
	{ 'g', ":756493478351077426:" },
	{ 'G', ":756493478351077426:" },
	{ 'h', ":756493489331634196:" },
	{ 'H', ":756493489331634196:" },
	{ 'i', ":756493505043628133:" },
	{ 'I', ":756493505043628133:" },
	{ 'j', ":756493518200897606:" },
	{ 'J', ":756493518200897606:" },
	{ 'k', ":756493530238681161:" },
	{ 'K', ":756493530238681161:" },
	{ 'l', ":756493544088141905:" },
	{ 'L', ":756493544088141905:" },
	{ 'm', ":756493555895238696:" },
	{ 'M', ":756493555895238696:" },
	{ 'n', ":756493566728994937:" },
	{ 'N', ":756493566728994937:" },
	{ 'o', ":7564935840472762041:" },
	{ 'O', ":7564935840472762041:" },
	{ 'p', ":756493593358893116:" },
	{ 'P', ":756493593358893116:" },
	{ 'q', ":756494001171071078:" },
	{ 'Q', ":756494001171071078:" },
	{ 'r', ":756494013720166500:" },
	{ 'R', ":756494013720166500:" },
	{ 's', ":756494021966299226:" },
	{ 'S', ":756494021966299226:" },
	{ 't', ":756494032078635018:" },
	{ 'T', ":756494032078635018:" },
	{ 'u', ":756494042073923645:" },
	{ 'U', ":756494042073923645:" },
	{ 'v', ":756494051284353065:" },
	{ 'V', ":756494051284353065:" },
	{ 'w', ":756494065163436032Copy:" },
	{ 'W', ":756494065163436032Copy:" },
	{ 'x', ":756494072729960499Copy:" },
	{ 'X', ":756494072729960499Copy:" },
	{ 'y', ":756494084855562301Copy:" },
	{ 'Y', ":756494084855562301Copy:" },
	{ 'z', ":756494299822030891:" },
	{ 'Z', ":756494299822030891:" },
};

int main()
{
	while (true)
	{
		Sleep(10);

		std::cout << "Input tetx: ";
		std::string inputText;
		std::getline(std::cin, inputText);

		std::string outputString;

		for (int i = 0; i < inputText.length(); i++)
		{
			char currChar = inputText.at(i);
			if (ALL_COLOR_CHARS.find(currChar) != ALL_COLOR_CHARS.end())
			{
				outputString += ALL_COLOR_CHARS.at(currChar);
			}
			else
			{
				outputString += currChar;
			}
		}

		std::cout << outputString << std::endl;

		std::cout << std::endl;
		std::cout << "Press any key to enter new string" << std::endl;
		system("pause >nul");
		system("cls");
	}

	system("pause >nul");
	return 0;
}